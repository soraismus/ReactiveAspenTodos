{ active, getTodos }                   = require '../todo-utilities'
{ appStateProperty }                   = require '../vendor/Aspen'
{ compose, extend, set, store, uuid }  = require '../utilities'
{ NAMESPACE }                          = require '../namespace'
{ transforms, utilities }              = require '../vendor/Pando'

{ connect, getDispatcher, onValue, plugIntoTerminus } =
  require '../vendor/Controller'

{ doAsync }            = utilities
{ filtering, mapping } = transforms

activate = \todo ->
  set ('completed', false, todo)

activateAll = \todos ->
  todos.map activate

addTodo = \title \appState ->
  return appState unless title
  newTodos = appState.todos.concat (createTodo title)
  set ('todos', newTodos, appState)

cacheAppData = \appState ->
  store (NAMESPACE, appState)
  appState

# WET; c.f. `activate`.
complete = \todo ->
  set ('completed', true, todo)

# WET; c.f. `activateAll`.
completeAll = \todos ->
  todos.map complete

createTodo = \title ->
  { completed: false, id: uuid (), title: title }

editAppState = \capsule \appState ->
  { id }   = capsule
  { todo } = findTodo (appState.todos, id)

  storeOrigTitle todo.title
  set ('editing', id, appState)

findTodo = (todos, id) ->
  for todo, index in todos
    return { index, todo } if todo.id == id

endEditing = \getText \capsule ->
  text               = getText ()
  { event, id }      = capsule
  event.target.value = text

  \appState ->
    { todos }       = appState
    { index, todo } = findTodo (todos, id)
    if text
      newTodo  = set ('title', text, todo)
      newTodos = set (index, newTodo, todos)
    else
      newTodos = removeTodo (todos, id)
    extend ({}, appState, { editing: null, todos: newTodos })

extractNewTodo = \capsule ->
  caption = capsule.event.target.value.trim ()
  capsule.event.target.value = ''
  addTodo caption

filteringKey = \key ->
  filtering \capsule -> capsule.event.keyCode == key

[restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle] = do ->
  editText     = null
  originalText = null

  restoreOrigTitle = ->
    editText = originalText
  saveCurrentTitle = ->
    if editText then editText.trim () else editText
  storeOrigTitle = \title ->
    editText = originalText = title
  storeTitle = \title ->
    editText = title

  [restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle]

removeCompleted = \capsule \appState ->
  newTodos = appState.todos.filter active
  set ('todos', newTodos, appState)

removeTodoByID = \capsule \appState ->
  newTodos = removeTodo (appState.todos, capsule.id)
  set ('todos', newTodos, appState)

removeTodo = (todos, id) ->
  todos.filter \todo -> todo.id != id

# WET; c.f. `activate`.
toggle = \todo ->
  set ('completed', !todo.completed, todo)

toggleAllTodos = \capsule \appState ->
  { todos }    = appState
  allCompleted = todos.every \todo -> todo.completed
  manage       = if allCompleted then activateAll else completeAll
  newTodos     = manage todos
  set ('todos', newTodos, appState)

toggleTodo = \capsule \appState ->
  { index, todo } = findTodo (appState.todos, capsule.id)
  newTodo  = toggle todo
  newTodos = set (index, newTodo, appState.todos)
  set ('todos', newTodos, appState)

filteringEnter  = filteringKey 13
filteringEscape = filteringKey 27

nodes = [
  '$toggle-clicks'
  '$toggle-all-clicks'
  '$clear-clicks'
  '$new-todo-keydowns'
  '$destroy-clicks'
  '$edit-blurs'
  '$edit-keydowns'
  '$edit-keydowns'
]

transforms = [
  mapping toggleTodo
  mapping toggleAllTodos
  mapping removeCompleted
  compose [filteringEnter, (mapping extractNewTodo)]
  mapping removeTodoByID
  mapping (endEditing saveCurrentTitle)
  compose [filteringEnter,  mapping (endEditing saveCurrentTitle)]
  compose [filteringEscape, mapping (endEditing restoreOrigTitle)]
]

connect nodes 'cacher' -> transforms

plugIntoTerminus 'cacher', ->
  mapping \transform -> ; cacheAppData transform ;

plugIntoTerminus '$todo-label-doubleclicks', ->
  mapping editAppState

onValue 'todo-in-edit', \capsule ->
  storeTitle (capsule.event.target.value)
