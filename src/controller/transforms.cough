{ add, recaption, remove, removeCompleted, toggle, toggleAll } = require '../model/todoList'
{ appStateProperty }                                           = require '../vendor/Aspen'
{ store, uuid }                                                = require '../utilities'
{ filtering }                                                  = require('../vendor/Pando').transforms
NAMESPACE                                                      = require '../namespace'
{ reset, resetEditing, resetTodos }                            = require '../model/appState'

cacheAppData = \appState ->
  store (NAMESPACE, appState)
  appState

editAppState = \capsule \appState ->
  todo = findTodo (appState.todos, capsule.id)
  storeOrigTitle todo.title
  resetEditing (appState, capsule.id)

_endEditing = (text, id) -> (appState) ->
  manage = if text then recaption else remove
  newTodos = manage (appState.todos, id, text)
  reset (appState, { editing: null, todos: newTodos })

endEditing = \getText \capsule ->
  text = getText ()
  setEventTgtValue (capsule, text)
  _endEditing (text, capsule.id)

_extractNewTodo = \title \appState ->
  return appState unless title
  resetTodos (appState, add (appState.todos, title))

extractNewTodo = \capsule ->
  caption = capsule.event.target.value.trim ()
  setEventTgtValue (capsule, '')
  _extractNewTodo caption

filteringKey = \key ->
  filtering \capsule -> capsule.event.keyCode == key

findTodo = (todos, id) ->
  for todo, index in todos
    return todo if todo.id == id

removeCompletedTodos = \capsule \appState ->
  resetTodos (appState, removeCompleted appState.todos)

removeTodo = \capsule \appState ->
  resetTodos (appState, remove (appState.todos, capsule.id))

[restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle] = do ->
  editText     = null
  originalText = null

  restoreOrigTitle = ->
    editText = originalText
  saveCurrentTitle = ->
    if editText then editText.trim () else editText
  storeOrigTitle = \title ->
    editText = originalText = title
  storeTitle = \title ->
    editText = title

  [restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle]

setEventTgtValue = (capsule, text) ->
  capsule.event.target.value = text

storeCookie = \appState ->
  value = encodeURIComponent(JSON.stringify(appState))
  document.cookie = "aspenTodoAppState=#{value}"
  appState

toggleAllTodos = \capsule \appState ->
  resetTodos (appState, (toggleAll appState.todos))

toggleTodo = \capsule \appState ->
  resetTodos (appState, toggle (appState.todos, capsule.id))

filteringEnter  = filteringKey 13
filteringEscape = filteringKey 27

module.exports = {
  cacheAppData
  editAppState
  endEditing
  extractNewTodo
  filteringEnter
  filteringEscape
  removeCompletedTodos
  removeTodo
  toggleAllTodos
  toggleTodo
  restoreOrigTitle
  saveCurrentTitle 
  storeCookie
  storeTitle
}
