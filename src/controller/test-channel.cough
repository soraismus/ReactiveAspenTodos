{ active, getTodos }                         = require '../todo-utilities'
{ appStateProperty }                         = require '../vendor/Aspen'
{ connect, getDispatcher, plugIntoTerminus } = require '../vendor/Controller'
{ transforms, utilities }                    = require '../vendor/Pando'
{ store }                                    = require '../utilities'
{ doAsync }                                  = utilities
{ filtering, mapping }                       = transforms
{ uuid }                                     = require '../utilities'

plugIntoTerminus 'cacher', ->
  mapping \transform -> ; cacheAppData transform ;

NAMESPACE = 'reactive-aspen-todos'

cacheAppData = \appState ->
  store (NAMESPACE, appState)
  appState

activateAll = \appState ->
  { todos } = appState
  todos.forEach \todo -> todo.completed = false
  appState.activeCount = todos.length

addTodo = \title \appState ->
  return appState unless title
  appState.todos.push (createTodo title)
  appState.activeCount += 1
  appState.count += 1
  appState

completeAll = \appState ->
  appState.todos.forEach \todo -> todo.completed = true
  appState.activeCount = 0

continueEditingTodo = (todo, text) ->
  todo.title = text

createTodo = \title ->
  completed : false
  editing   : false
  editText  : title
  id        : uuid ()
  title     : title

editTodo = \todo ->
  todo.editing  = true
  todo.editText = todo.title
  todo.focus    = true
  todo

# No appState caching.
editAppState = \id \appState ->
  { todos }      = appState
  appState.focus = false
  [todo, index]  = findTodo (todos, id)
  todos[index]   = editTodo todo
  appState

findTodo = (todos, id) ->
  for todo, index in todos
    return [todo, index] if todo.id == id

endEditing = \capsule ->
  { id, index } = capsule
  \appState ->
    appState.focus = true
    [todo, index]  = findTodo (appState.todos, id)
    todo.editing   = false
    todo.focus     = false
    title          = getTitle().trim()
    todo.title     = title
    todo.editText  = title

    result = if todo.title then appState else removeTodo (index, appState)
    result

enterKey? = \capsule ->
  capsule.event.keyCode == 13

extractID = \capsule ->
  capsule.id

extractNewTodo = \capsule ->
  value = capsule.event.target.value.trim ()
  capsule.event.target.value = ''
  addTodo value

[getTitle, storeTitle] = do ->
  _title = null
  getTitle = ->
    _title
  storeTitle = \title ->
    _title = title
  [getTitle, storeTitle]

removeCompleted = \appState ->
  appState.todos = appState.todos.filter active
  appState.activeCount = appState.count = appState.todos.length
  appState

removeTodoByID = \id \appState ->
  { todos } = appState
  [todo, index] = findTodo (todos, id)
  todos.splice (index, 1)
  appState.activeCount -= 1 unless todo.completed
  appState.count -= 1
  appState

# WET.
# Possibly clobber `completed`
removeTodo = (index, appState) ->
  { todos } = appState
  { completed } = todos[index]
  todos.splice (index, 1)
  appState.activeCount -= 1 unless completed
  appState.count -= 1
  appState

storeTitleForID = (appState, capsule) ->
  [todo] = findTodo (appState.todos, capsule.id)
  storeTitle todo.title

toggleAllTodos = \appState ->
  manage = if appState.activeCount == 0 then activateAll else completeAll
  manage appState
  appState

toggleTodo = \id \appState ->
  { activeCount, mode, todos } = appState
  [todo, index] = findTodo (todos, id)
  { completed } = todo
  appState.activeCount = updateCount (activeCount, completed)
  todo.completed = !completed
  appState

updateCount = (nbr, completed) ->
  addend = if completed then 1 else -1
  nbr + addend

connect '$toggle-clicks' 'cacher' ->
  mapping \capsule -> toggleTodo (extractID capsule)

connect '$toggle-all-clicks' 'cacher' ->
  mapping -> toggleAllTodos

connect '$clear-clicks' 'cacher' ->
  mapping -> removeCompleted

connect '$new-todo-keydowns' 'cacher' ->
  ; filtering (enterKey?) mapping (extractNewTodo) ;

connect '$destroy-clicks' 'cacher' ->
  mapping \capsule -> removeTodoByID (extractID capsule)

# -------------------------------------------------------------------------
# No appState caching.
plugIntoTerminus '$todo-label-doubleclicks', ->
  mapping \capsule ->
    editAppState (extractID capsule)

getDispatcher('$todo-label-doubleclicks').subscribe \capsule ->
  doAsync (storeTitleForID) (appStateProperty, capsule)

getDispatcher('todo-in-edit').subscribe \capsule ->
  storeTitle (capsule.event.target.value)
# -------------------------------------------------------------------------

connect '$edit-keydowns' 'cacher' ->
  ; filtering (enterKey?) mapping (endEditing) ;

connect '$edit-blurs' 'cacher' ->
  mapping endEditing
