{ active, getTodos }                         = require '../todo-utilities'
{ appStateProperty }                         = require '../vendor/Aspen'
{ connect,
  getDispatcher, onValue, plugIntoTerminus } = require '../vendor/Controller'
{ transforms, utilities }                    = require '../vendor/Pando'
{ doAsync }                                  = utilities
{ filtering, mapping }                       = transforms
{ compose, uuid }                            = require '../utilities'

activateAll = \appState ->
  { todos } = appState
  todos.forEach \todo -> todo.completed = false
  appState.activeCount = todos.length

addTodo = \title \appState ->
  return appState unless title
  appState.todos.push (createTodo title)
  appState.activeCount += 1
  appState.count += 1
  appState

completeAll = \appState ->
  appState.todos.forEach \todo -> todo.completed = true
  appState.activeCount = 0

continueEditingTodo = (todo, text) ->
  todo.title = text

createTodo = \title ->
  completed : false
  id        : uuid ()
  title     : title

editAppState = \capsule \appState ->
  { id }    = capsule
  { todos } = appState
  { todo }  = findTodo (todos, id)
  storeOrigTitle todo.title
  appState.editing = id
  appState

findTodo = (todos, id) ->
  for todo, index in todos
    return { todo, index } if todo.id == id

endEditing = \getText \capsule ->
  text = getText ()
  capsule.event.target.value = text

  \appState ->
    { todo, index } = findTodo (appState.todos, capsule.id)
    appState.editing = null
    todo.title       = text
    if text then appState else removeTodo (index, appState)

enterKey? = \capsule ->
  capsule.event.keyCode == 13

escapeKey? = \capsule ->
  capsule.event.keyCode == 27

extractNewTodo = \capsule ->
  value = capsule.event.target.value.trim ()
  capsule.event.target.value = ''
  addTodo value

[restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle] = do ->
  editText     = null
  originalText = null

  restoreOrigTitle = ->
    editText = originalText
  saveCurrentTitle = ->
    if editText then editText.trim () else editText
  storeOrigTitle = \title ->
    editText = originalText = title
  storeTitle = \title ->
    editText = title

  [restoreOrigTitle, saveCurrentTitle, storeOrigTitle, storeTitle]

removeCompleted = \capsule \appState ->
  appState.todos = appState.todos.filter active
  appState.activeCount = appState.count = appState.todos.length
  appState

removeTodoByID = \capsule \appState ->
  { index } = findTodo (appState.todos, capsule.id)
  removeTodo (index, appState)

removeTodo = (index, appState) ->
  { todos } = appState
  { completed } = todos[index]
  todos.splice (index, 1)
  appState.activeCount -= 1 unless completed
  appState.count -= 1
  appState

toggleAllTodos = \capsule \appState ->
  manage = if appState.activeCount == 0 then activateAll else completeAll
  manage appState
  appState

toggleTodo = \capsule \appState ->
  { activeCount, mode, todos } = appState
  { todo, index } = findTodo (todos, capsule.id)
  { completed } = todo
  appState.activeCount = updateCount (activeCount, completed)
  todo.completed = !completed
  appState

updateCount = (nbr, completed) ->
  addend = if completed then 1 else -1
  nbr + addend

filteringEnter  = filtering enterKey?
filteringEscape = filtering escapeKey?

nodes = [
  '$toggle-clicks'
  '$toggle-all-clicks'
  '$clear-clicks'
  '$new-todo-keydowns'
  '$destroy-clicks'
  '$edit-blurs'
  '$edit-keydowns'
  '$edit-keydowns'
]

transforms = [
  mapping toggleTodo
  mapping toggleAllTodos
  mapping removeCompleted
  compose [filteringEnter, (mapping extractNewTodo)]
  mapping removeTodoByID
  mapping (endEditing saveCurrentTitle)
  compose [filteringEnter,  mapping (endEditing saveCurrentTitle)]
  compose [filteringEscape, mapping (endEditing restoreOrigTitle)]
]

connect nodes 'cacher' -> transforms

plugIntoTerminus '$todo-label-doubleclicks', ->
  mapping editAppState

onValue 'todo-in-edit', \capsule ->
  storeTitle (capsule.event.target.value)
