{ Controller, Pando }      = require '../../vendor/reactive-aspen'
{ store }                  = require '../utilities'
{ connect, getDispatcher } = Controller
{ transforms, utilities }  = Pando
{ doAsync }                = utilities
{ filtering, mapping }     = transforms

NAMESPACE = 'reactive-aspen-todos'
TERMINUS  = '_terminus_'

cacheAppData = \appState ->
  store (NAMESPACE, appState)
  appState

# -------------------------------------------------------------------------
$router-events = getDispatcher ('$router-events', true)
setModeTo = (mode) -> () ->
  $router-events.dispatch mode
router = Router
  '/'          : setModeTo 'all' 
  '/active'    : setModeTo 'active'
  '/completed' : setModeTo 'completed'
router.init '/'
# -------------------------------------------------------------------------

activateAll = \appState ->
  todos = appState.todos
  todos.forEach \todo -> todo.completed = false
  appState.activeCount = todos.length

addTodo = \title \appState ->
  return appState unless title
  appState.todos.push (createTodo title)
  appState.activeCount += 1
  appState.count += 1
  cacheAppData appState

completeAll = \appState ->
  appState.todos.forEach \todo -> todo.completed = true
  appState.activeCount = 0

continueEditingTodo = (todo, text) ->
  todo.title = text

continueEditingAppState = \props ->
  { index, value } = props
  \appState ->
    continueEditingTodo (appState.todos[index], value)
    cacheAppData appState

createTodo = \title ->
  { completed: false, editing: false, editText: title, title }

editTodo = \todo ->
  todo.editing  = true
  todo.editText = todo.title
  todo.focus    = true
  todo

editAppState = \index \appState ->
  { todos }    = appState
  appState.focus = false
  todos[index]   = editTodo todos[index]
  appState

endEditing = \capsule ->
  { index } = capsule
  \appState ->
    appState.focus = true
    todo           = appState.todos[index]
    todo.editing   = false
    todo.focus     = false
    title          = getTitle().trim()
    todo.title     = title
    todo.editText  = title

    result = if todo.title then appState else removeTodo (index) (appState)
    cacheAppData result

enterKey? = \capsule ->
  capsule.event.keyCode == 13

extractIndex = \capsule ->
  capsule.index

extractIndexAndValue = \capsule ->
  { index } = capsule
  { value } = capsule.event.target
  { index, value }

extractNewTodo = \capsule ->
  value = capsule.event.target.value.trim ()
  capsule.event.target.value = ''
  addTodo value

[getTitle, storeTitle] = do ->
  _title = null
  getTitle = ->
    _title
  storeTitle = \title ->
    _title = title
  [getTitle, storeTitle]

removeCompleted = \appState ->
  appState.todos = appState.todos.filter active
  appState.activeCount = appState.count = appState.todos.length
  cacheAppData appState

removeTodo = \index \appState ->
  { todos } = appState
  { completed } = todos[index]
  todos.splice (index, 1)
  appState.activeCount -= 1 unless completed
  appState.count -= 1
  cacheAppData appState

storeTitleForIndex = (appState, capsule) ->
  storeTitle (appState.todos[capsule.index].title)

toggleAllTodos = \appState ->
  manage = if appState.activeCount == 0 then activateAll else completeAll
  manage appState
  cacheAppData appState

toggleTodo = \index \appState ->
  { activeCount, mode, todos } = appState
  todo = getTodos(mode, todos)[index]
  { completed } = todo
  appState.activeCount = updateCount (activeCount, completed)
  todo.completed = !completed
  cacheAppData appState

transformAppState = \transform \appState ->
  transform appState
  cacheAppData appState

updateCount = (nbr, completed) ->
  addend = if completed then 1 else -1
  nbr + addend

updateMode = \newMode \appState ->
  appState.mode = newMode
  cacheAppData appState

# -------------------------------------------------------------------------
# WET.
active = \todo ->
  !todo.completed

completed = \todo ->
  todo.completed

getTodos = (mode, todos) ->
  switch mode
    when 'active'    then todos.filter active
    when 'all'       then todos
    when 'completed' then todos.filter completed
# -------------------------------------------------------------------------

connect '$toggle-clicks' TERMINUS ->
  mapping (\capsule -> toggleTodo (extractIndex capsule))

connect '$router-events' TERMINUS ->
  mapping updateMode

connect '$toggle-all-clicks' TERMINUS ->
  mapping (-> toggleAllTodos)

connect '$clear-clicks' TERMINUS ->
  mapping (-> removeCompleted)

connect '$new-todo-keydowns' TERMINUS ->
  ; filtering (enterKey?) mapping (extractNewTodo) ;

connect '$destroy-clicks' TERMINUS ->
  mapping (\capsule -> removeTodo (extractIndex capsule))

# -------------------------------------------------------------------------
connect '$todo-label-doubleclicks' TERMINUS ->
  mapping (\capsule -> editAppState (extractIndex capsule))

getDispatcher('$todo-label-doubleclicks').subscribe \capsule ->
  doAsync (storeTitleForIndex) ((getDispatcher '_appState_'), capsule)

getDispatcher('todo-in-edit').subscribe \capsule ->
  storeTitle (capsule.event.target.value)
# -------------------------------------------------------------------------

connect '$edit-keydowns' TERMINUS ->
  ; filtering (enterKey?) mapping (endEditing) ;

connect '$edit-blurs' TERMINUS ->
  mapping endEditing

module.exports = null
