{ Controller, Pando }      = require '../../vendor/reactive-aspen'
{ connect, getDispatcher } = Controller
{ filtering, mapping }     = Pando

TERMINUS = 'terminus'

log = \label \event -> console.log (label, event)

logSubscribe = \label ->
  getDispatcher(label).subscribe(log label)

[
  '$toggle-all-clicks'
  '$new-todo-keydowns'
  '$toggle-clicks'
  '$destroy-clicks'
  '$clear-clicks'
  '$active-todos-clicks',
  '$all-todos-clicks'
  '$completed-todos-clicks'
  'todo-in-edit'
  '$edit-blurs'
  '$edit-focuses'
  '$edit-keydowns'
  '$todo-label-doubleclicks'
].forEach logSubscribe

activateAll = \appState ->
  todos = appState.todos
  todos.forEach \todo -> todo.completed = false
  appState.activeCount = todos.length

addTodo = \title \appState ->
  appState.todos.push (createTodo title)
  appState.activeCount += 1
  appState.count += 1
  appState

completeAll = \appState ->
  appState.todos.forEach \todo -> todo.completed = true
  appState.activeCount = 0

continueEditingTodo = (todo, text) ->
  todo.editText = text

continueEditingAppState = \props ->
  { index, value } = props
  \appState ->
    { todos }        = appState
    continueEditingTodo (todos[index], value)
    appState

createTodo = \title ->
  { completed: false, editing: false, editText: '', title }

editTodo = \todo ->
  todo.editing = true
  todo.editText = todo.title
  todo

editAppState = \index \appState ->
  { todos } = appState
  todos[index] = editTodo(todos[index])
  appState

endEditing = \capsule ->
  { index } = capsule
  \appState ->
    todo = appState.todos[index]
    todo.editing = false
    todo.title   = todo.editText
    todo.editText = ''
    appState

enterKey? = \capsule ->
  capsule.event.keyCode == 13

extractIndex = \capsule ->
  capsule.index

extractIndexAndValue = \capsule ->
  { index } = capsule
  { value } = capsule.event.target
  { index, value }

extractNewTodo = \capsule ->
  value = capsule.event.target.value.trim ()
  capsule.event.target.value = ''
  addTodo value

removeCompleted = \appState ->
  appState.todos = appState.todos.filter active
  appState.activeCount = appState.count = appState.todos.length
  appState

removeTodo = \index \appState ->
  { todos } = appState
  { completed } = todos[index]
  todos.splice (index, 1)
  appState.activeCount -= 1 unless completed
  appState.count -= 1
  appState

toggleAllTodos = \appState ->
  manage = if appState.activeCount == 0 then activateAll else completeAll
  manage appState
  appState

toggleTodo = \index \appState ->
  { activeCount, mode, todos } = appState
  todo = getTodos(mode, todos)[index]
  { completed } = todo
  appState.activeCount = updateCount (activeCount, completed)
  todo.completed = !completed
  appState

transformAppState = \transform \appState ->
  transform appState
  appState

updateCount = (nbr, completed) ->
  addend = if completed then 1 else -1
  nbr + addend

updateMode = \newMode \appState ->
  appState.mode = newMode
  appState

# -------------------------------------------------------------------------
# WET.
active = \todo ->
  !todo.completed

completed = \todo ->
  todo.completed

getTodos = (mode, todos) ->
  switch mode
    when 'active'    then todos.filter active
    when 'all'       then todos
    when 'completed' then todos.filter completed
# -------------------------------------------------------------------------

connect '$toggle-clicks' TERMINUS ->
  mapping (\capsule -> toggleTodo (extractIndex capsule))

connect '$active-todos-clicks' TERMINUS ->
  mapping (-> updateMode 'active')

connect '$all-todos-clicks' TERMINUS ->
  mapping (-> updateMode 'all')

connect '$completed-todos-clicks' TERMINUS ->
  mapping (-> updateMode 'completed')

connect '$toggle-all-clicks' TERMINUS ->
  mapping (-> toggleAllTodos)

connect '$clear-clicks' TERMINUS ->
  mapping (-> removeCompleted)

connect '$new-todo-keydowns' TERMINUS ->
  ; filtering (enterKey?) mapping (extractNewTodo) ;

connect '$destroy-clicks' TERMINUS ->
  mapping (\capsule -> removeTodo (extractIndex capsule))

connect '$todo-label-doubleclicks' TERMINUS ->
  mapping (\capsule -> editAppState (extractIndex capsule))

connect 'todo-in-edit' TERMINUS ->
  mapping (; continueEditingAppState extractIndexAndValue ;)

connect '$edit-keydowns' TERMINUS ->
  ; filtering (enterKey?) mapping (endEditing) ;

module.exports = null
